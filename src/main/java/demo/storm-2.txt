worker,executor,task,bolt,spout数量关系:
worker
	1个worker进程执行的是1个topology的子集
	（注：不会出现1个worker为多个topology服务）。
	1个worker进程会启动1个或多个executor线程来执行1个topology的component(spout或bolt)。
	因此，1个运行中的topology就是由集群中多台物理机上的多个worker进程组成的。
executor
	executor是1个被worker进程启动的单独线程。
	每个executor只会运行1个topology的1个component(spout或bolt)的task
	（注：task可以是1个或多个，storm默认是1个component只生成1个task，executor线程里会在每次循环里顺序调用所有task实例）。
task
	task是最终运行spout或bolt中代码的单元
		（注：1个task即为spout或bolt的1个实例，executor线程在执行期间会调用该task的nextTuple或execute方法）。
	topology启动后，1个component(spout或bolt)的task数目是固定不变的，
	但该component使用的executor线程数可以动态调整
	（例如：1个executor线程可以执行该component的1个或多个task实例）。
	这意味着，对于1个component存在这样的条件：
		#threads<=#tasks（即：线程数小于等于task数目）。
		默认情况下task的数目等于executor线程数目，即1个executor线程只运行1个task。


在创建Storm的Topology时，我们通常使用如下代码：

	builder.setBolt("cpp", new CppBolt(), 3).setNumTasks(5).noneGrouping(pre_name);
	Config conf = new Config();
	conf.setNumWorkers(3);

	参数1：bolt名称 "cpp"
	参数2：bolt类型 CppBolt
	参数3：bolt的并行数，parallelismNum，即运行topology时，该bolt的线程数
	setNumTasks() 设置bolt的task数
	noneGrouping()  设置输入流方式及字段
	conf.setNumWorkers()设置worker数据。

	解释:
	一个storm topology运行起来之后, 会在supervisor 机器上启动一些进程来运行spout和bolt实例.

	如果:spout * 2 + bolt * 6 = topology(task = 6)
	zknode的/tasks/{topology-id}下会有6以task-id命名的文件,其中2文件内容个是spout的id,4个文件内容是bolt的id
		即:task都会跟一个componment-id(spout/bolt统称)关联
	task-id通过supervisor-hostname+port映射,也就是把这个task分配给某台机器的某个端口来做
		即:componment根据parallelism分为多个task,分配到supervisor多个worker执行



	通过设置parallelism来指定执行spout/bolt的线程数量.
	而在配置中Config.setNumWorkers(int)来指定一个storm集群中执行topolgy的进程数量,
	所有的线程将在这些指定的worker进程中运行.
		比如说一个topology中要启动300个线程来运行spout/bolt, 而指定的worker进程数量是60个,
		那么storm将会给每个worker分配5个线程来跑spout/bolt,
	如果要对一个topology进行调优, 可以调整worker数量和spout/bolt的parallelism数量
	(调整参数之后要记得重新部署topology. 后续会为该操作提供一个swapping的功能来减小重新部署的时间).

	对于worker和task之间的比例一般1个worker包含10~15个左右task, 实际情况还是要根据配置和测试情况


	总结，
	1）worker进程数由conf.setNumWorkers()设置
		storm rebalance命令任意调整
	2) bolt的executor数:parallelismNum(线程数)，在builder.setBolt("cpp", new CppBolt(), 3)时,由第三个参数指定。
		它可以通过storm rebalance 命令调整，但最大不能超过该bolt的task数；
	3) bolt的task数，通过setNumTasks()设置。
		（也可不设置，默认取bolt的executor数），运行时rebalance无法调整。
	4)Bolt实例数，这个比较特别，它和task数相等。
		有多少个task就会new 多少个Bolt对象。而这些Bolt对象在运行时由Bolt的thread进行调度。
		也即是说
		builder.setBolt("cpp", new CppBolt(), 3).setNumTasks(5).noneGrouping(pre_name);
		会创建3个线程，但有内存中会5个CppBolt对象。


这里在补充一些：默认情况下#
executor = #tasks即一个Executor中运行着一个Task。
Spout或者Bolt的Task个数一旦指定之后就不能改变了，而Executor的数量可以根据情况来进行动态的调整。

一句话介绍，
	每台worker node上可以运行很多个worker，
	每个worker会开辟很多Executor线程来执行Task。
	在Storm看来，spout和bolt都是task。
