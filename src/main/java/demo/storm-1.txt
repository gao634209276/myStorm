课程介绍

一:基础
环境搭建,概念,工作原理
API,常用spot,bolt详解
Grouping策略详解和案例
并行度详解及案例
线程安全控制及场景,方案
综合案例开发结合企业场景
批处理事务详解及案例开发
DRPC深入讲解及案例
二:进阶
storm Trident是基于原声storm API的高级封装,类似于MR的pig框架,让我们开发高并发,批处理实时需求时更加放心快捷
Trident API以及众多概念
Trident state,spout,bolt
场景案例
三:运维
配置参数,storm命令等详解
集群统一启动和停止shell脚本开发
storm集群和作业监控告警开发(可接告警平台)
分享经验和心得
分享对一些较为复杂场景的设计方式

Storm原理概念详解
	Nimbus:主节点;Supervisor:从节点;topologies(拓扑):死循环,相当于App;
1.Nimbus和Supervisors之间所有的协调工作是通过一个Zookeeper集群
	Nimbus进程和Supervisors进程是无法直接链接和无状态的,所有状态维持在Zookeeper中或者保存在本地磁盘上
	这意味着你可以kill -9 Nimbus或Supervisors进程,而不需要做备份
	这种设计导致storm集群具有令人难以置信的稳定性,即无耦合;

	Nimbus负责在集群分发代码,topo只能在nimbus机器上提交,将任务分配给其他机器,和故障检测;
	Supervisor:监听分配给他的节点,根据Nimbus的委派在必要时启动和关闭工作进程.
	每个工作进程执行topology的一个子集.一个运行中的topology由很多运行在很多机器上的工作进程组成;
	在storm中对于stream的抽象,流是一个不间断的无界的连续tuple,注意storm在建模事件流时,把流中的事件抽象为tuple即元组

Storm工作原理
	Storm认为每个stream都有一个源,也就是原始元组的源头,叫做spout(管口)
	处理stream内的tuple,抽象为Bolt,bolt可以消费任意数量的输入流,
	只要将流方向导向该bolt,同时它也可以发送新的流给其他的bolt使用,
	这样依赖,只要打开特定的spout再讲spout中流出的tuple导向特定的bolt,又对bolt导出的流做处理后在导向其他bolt或者目的地.

	spout--(tuple1,tuple2...)-->Bolt(处理流)--(tuple3,tuple4..)-->Bolt-->

	为了增大数据处理效率,我们很自然就想到了同个水源出接上多个Spout并使用多个Blot,这样就提高了效率;



